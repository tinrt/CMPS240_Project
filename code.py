# -*- coding: utf-8 -*-
"""Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18s7CVEUwvtOO0-EASYIyjj6ZIJ_3OExE

# CMPS 240 Final Project

### Tina Nosrati

### 11/28/2024
"""

# importing packages
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_1samp,ttest_ind,f_oneway,chi2_contingency
import statsmodels.stats.weightstats as smw
import scipy.stats as stats
from scipy.stats import kstest, expon
import statsmodels.api as sm
import folium

# reading data
df=pd.read_csv("athens_weekends.csv")
df.head()

"""# Data Prepration"""

df=df.drop(columns=['Unnamed: 0','room_shared','attr_index','rest_index'])

df.info()

# drop duplicated values
df.drop_duplicates(inplace=True)

# make sure it's in Athens
df = df[
    (df['lat'].between(37.8, 38.1)) &
    (df['lng'].between(23.6, 23.9))]

df.describe()

# Convert boolean to integer
bool_columns = ['room_private', 'host_is_superhost']
df[bool_columns] = df[bool_columns].astype(int)

df.head()

"""# Visualization"""

sns.countplot(data=df, x='room_type')
plt.title('Distribution of Room Types')
plt.xlabel('Room Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# removing 'Private room' and 'Shared room' because of few observations
df = df[~df['room_type'].isin(['Private room', 'Shared room'])]
df=df.drop(columns=['room_type'])

plt.figure(figsize=(10, 6))
sns.histplot(df['cleanliness_rating'], kde=True, bins=15)
plt.title('Distribution of Cleanliness Rating')
plt.xlabel('Cleanliness Rating')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='dist', y='guest_satisfaction_overall', data=df, alpha=0.6)
plt.title('Guest Satisfaction vs Distance')
plt.xlabel('Distance')
plt.ylabel('Guest Satisfaction Overall')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='host_is_superhost', y='guest_satisfaction_overall', data=df)
plt.title('Guest Satisfaction by Superhost Status')
plt.xlabel('Is Superhost')
plt.ylabel('Guest Satisfaction Overall')
plt.show()

plt.figure(figsize=(12, 8))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='rest_index_norm', y='attr_index_norm', data=df, alpha=0.6)
plt.title('Restaurant Index vs Attractiveness Index')
plt.xlabel('Restaurant Index')
plt.ylabel('Attractiveness Index')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='bedrooms', y='guest_satisfaction_overall', data=df)
plt.title('Number of Bedrooms vs Guest Satisfaction')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Guest Satisfaction Overall')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x='cleanliness_rating', y='guest_satisfaction_overall', data=df, alpha=0.6)
plt.title('Guest Satisfaction Overall vs Cleanliness Rating')
plt.xlabel('Cleanliness Rating')
plt.ylabel('Guest Satisfaction Overall')
plt.show()

"""# Hypothesis Testing"""

# Null Hypothesis: The mean price (realSum) is 100.
t_stat, p_value = ttest_1samp(df['realSum'], 100)
a=0.05
print("One-Sample T-Test:")
print(f"T-statistic: {t_stat}, P-value: {p_value}")
print(f"One-Sample T-Test: P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The mean price for superhost and non-superhost listings is the same
superhost_prices = df[df['host_is_superhost'] == 1]['realSum']
non_superhost_prices = df[df['host_is_superhost'] == 0]['realSum']
a=0.05
t_stat, p_value = ttest_ind(superhost_prices, non_superhost_prices, equal_var=False)
print("\nTwo-Sample T-Test:")
print(f"T-statistic: {t_stat}, P-value: {p_value}")
print(f"Two-Sample T-Test: P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The mean price is the same across all bedroom groups.
groups = [group['realSum'] for _, group in df.groupby('bedrooms')]
a=0.05
f_stat, p_value = f_oneway(*groups)
print("\nANOVA Test:")
print(f"F-statistic: {f_stat}, P-value: {p_value}")
print(f"ANOVA Test: P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The mean guest satisfaction is 95.

z_stat, p_value = smw.ztest(df['guest_satisfaction_overall'], value=95)
a=0.05
print("\nOne-Sample Z-Test:")
print(f"Z-statistic: {z_stat}, P-value: {p_value}")
print(f"One-Sample Z-Test: P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The cleanliness rating is the same for business and non-business listings.

biz_cleanliness = df[df['biz'] == 1]['cleanliness_rating']
non_biz_cleanliness = df[df['biz'] == 0]['cleanliness_rating']
a=0.05
z_stat, p_value = smw.ztest(biz_cleanliness, non_biz_cleanliness)
print("\nTwo-Sample Z-Test:")
print(f"Z-statistic: {z_stat}, P-value: {p_value}")
print(f"Two-Sample Z-Test: P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The mean price is the same across all distance quartiles.

df['dist_quartile'] = pd.qcut(df['dist'], q=4)
groups = [group['realSum'] for _, group in df.groupby('dist_quartile')]
a=0.05
f_stat, p_value = f_oneway(*groups)
print("\nANOVA Test (Distance Quartiles):")
print(f"F-statistic: {f_stat}, P-value: {p_value}")
print(f"ANOVA Test (Distance Quartiles): P-value = {p_value}")
print("Reject Null Hypothesis:", p_value < a)

# Null Hypothesis: The price distribution (realSum) follows a normal distribution.
stat, p_value = kstest(df['realSum'], 'norm', args=(df['realSum'].mean(), df['realSum'].std()))
a = 0.05
print("\nKolmogorov-Smirnov Test:")
print(f"Test Statistic: {stat}, P-value: {p_value}")
print("Reject Null Hypothesis (Data is not normal):", p_value < a)

stats.probplot(df['realSum'], dist="norm", plot=plt)
plt.title("Q-Q Plot of Price Distribution")
plt.show()

# Null Hypothesis: The data (realSum) follows an exponential distribution.
data = df['realSum']
lambda_est = 1 / np.mean(data)
stat, p_value = kstest(data, 'expon', args=(0, 1/lambda_est))
a = 0.05
print("Kolmogorov-Smirnov Test for Exponential Distribution:")
print(f"Test Statistic: {stat}, P-value: {p_value}")
print("Reject Null Hypothesis (Data is not exponential):", p_value < a)

plt.figure(figsize=(10, 6))
plt.hist(data, bins=30, density=True, alpha=0.7, label='Data', edgecolor='k')
x = np.linspace(0, data.max(), 1000)
pdf = lambda_est * np.exp(-lambda_est * x)
plt.plot(x, pdf, 'r-', label=f'Fitted Exponential ($\lambda$={lambda_est:.4f})')

plt.title('Exponential Distribution Fit', fontsize=16)
plt.xlabel('Price (realSum)', fontsize=12)
plt.ylabel('Density', fontsize=12)
plt.legend(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""# Regression"""

df.info()

df=df.drop(columns=['dist_quartile'])

y = df['realSum']

# Model 1: Fit regression with all variables
X_all = df.drop(columns=['realSum', 'lng', 'lat'])
X_all = sm.add_constant(X_all)
model_all = sm.OLS(y, X_all).fit()

print("Model with All Variables:\n", model_all.summary())

predicted_values = model_all.predict(X_all)

# Plot Actual vs Predicted
plt.figure(figsize=(10, 6))
plt.scatter(y, predicted_values, alpha=0.6, edgecolor='k', label='Data Points')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', linewidth=2, label='Ideal Fit')
plt.title('Actual vs Predicted Values (Model 1)', fontsize=15)
plt.xlabel('Actual Values', fontsize=12)
plt.ylabel('Predicted Values', fontsize=12)
plt.legend()
plt.grid(True)
plt.show()

# log-transformed regression model
y_log = np.log(y + 1)
model_log = sm.OLS(y_log, X_all).fit()
predicted_log_values = model_log.predict(X_all)
print(model_log.summary())

plt.figure(figsize=(10, 6))
plt.scatter(y_log, predicted_log_values, alpha=0.6, edgecolor='k', label='Data Points')
plt.plot([y_log.min(), y_log.max()], [y_log.min(), y_log.max()], 'r--', linewidth=2, label='Ideal Fit')
plt.title('Actual (Log-Transformed) vs Predicted (Log-Transformed) Values', fontsize=15)
plt.xlabel('Actual Log Values', fontsize=12)
plt.ylabel('Predicted Log Values', fontsize=12)
plt.legend()
plt.grid(True)
plt.show()

"""# Show result on map"""

predicted_values = np.exp(predicted_log_values) - 1
df['PredictedValue'] = predicted_values
df['ActualValue'] = y

map_center = [df['lat'].mean(), df['lng'].mean()]
geo_map = folium.Map(location=map_center, zoom_start=12)

for _, row in df.iterrows():
    folium.CircleMarker(
        location=[row['lat'], row['lng']],
        radius=5,
        color='black',
        fill=True,
        fill_color='gray',
        fill_opacity=0.6,
        popup=(
            f"Predicted: {row['PredictedValue']:.2f}<br>"
            f"Actual: {row['ActualValue']:.2f}"
        )
    ).add_to(geo_map)

# Save the map
map_html_path = "geo_map.html"
geo_map.save(map_html_path)

geo_map